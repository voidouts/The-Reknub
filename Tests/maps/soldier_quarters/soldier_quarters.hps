#include "interfaces/Map_Interface.hps"
#include "base/Inputhandler_Types.hps"

#include "helpers/helper_map.hps"
#include "helpers/helper_props.hps"
#include "helpers/helper_areas.hps"
#include "helpers/helper_effects.hps"
#include "helpers/helper_audio.hps"
#include "helpers/helper_imgui.hps"
#include "helpers/helper_sequences.hps"
#include "helpers/helper_game.hps"
#include "helpers/helper_modules.hps"
#include "helpers/helper_ai.hps"
#include "helpers/helper_agent.hps"
#include "helpers/helper_player.hps"
#include "custom/helpers/helper_player_custom.hps"
#include "helpers/helper_imgui.hps"
#include "custom/helpers/helper_modules_custom.hps"
#include "custom/helpers/helper_gun.hps"
#include "custom/helpers/helper_props_custom.hps"

//--------------------------------------------------
 
/*Place any global values here. These must be const variables as they will not be saved*/
/*This is also the place for enums and classes, but these should be avoided whenever possible*/

//--------------------------------------------------
 
class cScrMap : iScrMap
{
	//--------------------------------------------
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN CALLBACKS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
 
	////////////////////////////
	// Set up map environment
	void Setup()
	{
		// Put display name entry in english.lang / Levels
		GetBase().SetDisplayNameEntry("soldier-quarters");
		
		// Set up color grading etc.
	
	}
	//-------------------------------------------------------
		
	void PreloadData()
	{
		//////////////
		// Preload entities
		Entity_Preload("player_bunker.ent");
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// Run first time starting map
	void OnStart()
	{
		// Any general setup of script / entities
		
		/////////////////////////
		// Debug
		if(cLux_ScriptDebugOn())
		{
			if (ItemType_GetCountInInventory("Gun") == 0)
			{
				Item_SetCurrentSlotsCount(15);
				Item_AddToInventory("CommunicationsKey");
				Item_AddToInventory("Gun");
				Item_AddToInventory("Ammunition");
				Item_AddToInventory("DynamoLantern");
				Item_AddToInventory("Wrench");
				Item_AddToInventory("Grenade");
				//Item_AddToInventory("Wrench");
				Item_AddToInventory("Shotgun");
				//Item_AddToInventory("Fuel");
				//Item_AddToInventory("GasGrenade");
				//Item_AddToInventory("Grenade");
				//Item_AddToInventory("EmptyBottle");				
				//Item_AddToInventory("GasMask");
				//Item_AddToInventory("Flare");
				//Item_AddToInventory("Flare");
				Item_AddToInventory("Lighter");
				Item_AddToInventory("Bandage");
				//Item_AddToInventory("Cutters");
				//Item_AddToInventory("MolotovCocktail");
				Item_AddToInventory("RabbitDoll");
			}
		}
		
		Slide_SetLocked("filing_cabinet_box03_3", true, true);
		
		///////////////////////
		// Handle randomized note and key location
		array<iLuxEntity@> vKeys;
		Map_GetEntityArray("CommunicationsKey_*", vKeys, eLuxEntityType_Prop, "cScrPropPickup");
		bool bFound = false;
		for (uint i = 0; i < vKeys.length(); i++)
		{
			iLuxEntity@ pKey = vKeys[i];
			if (pKey.IsActive() == false) continue;
			
			tString sName = pKey.GetName();
			int lFirstUnderscore = cString_GetFirstCharPos(sName, '_');
			int lLastUnderscore = cString_GetLastCharPos(sName, '_');
			
			tString sAuthor = cString_Sub(sName, lFirstUnderscore + 1, lLastUnderscore - lFirstUnderscore - 1);
			
			cLux_AddDebugMessage("sAuthor " + sAuthor + " " + pKey.IsActive());
			Entity_SetActive("Note_KeyLocation_" + sAuthor, true);
			bFound = true;
			break;
		}
		if (!bFound)
		{
			Error("Unable to find randomized Communications Key location! Using Tirel as default!");
			Entity_SetActive("Note_KeyLocation_Tirel", true);
			Entity_SetActive("CommunicationsKey_Tirel_1", true);
		}
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when entering map
	void OnEnter()
	{
		////////////////////////
		// Set rich presence
		RichPresence_SetCurrent(eRichPresence_SoldiersQuarters);
		
		///////////////////////
		// Setup player body
		if (PlayerBody_IsActive() == false)
		{
			PlayerBody_SetActive(true);
			PlayerBody_SetModel("player_bunker.ent");
		}
		
		/////////////////////
		// Enable rats
		RatHandler_SetActive(true);
		
		////////////
		// Generator
		SetupGenerator();
		
		///////////////////////
		// Setup stalker
		Blackboard_DoStalkerMapTransfer("Stalker_1");
		
		////////////////
		// Setup bombing effect
		BombingHandler_SetActive(true);
		
		///////////////////
		// Setup save game info hint
		SaveRoom_SetSaveHintActive(true);
		
		////////////////////
		// Radio
		bool bRadioIsPowered = GetRadioPowerOn();
		SetRadioPowerOn(bRadioIsPowered);
		Entity_SetVarBool("RadioLamp_*", "IgnoreAgentFlicker", true);
		
		///////////////////
		// Music Radio
		/*tString sRadioSound = "Sound_MusicRadio";
		if (GetIsMusicRadioOn())
			Sound_Play(sRadioSound, 0.1f, true);
		else
			Sound_Stop(sRadioSound, 0.1);*/
		
		///////////////////////////////
		// Setup low height auto-teleport
		Player_SetAutoTeleportWhenBelowAltitude(-20.f);
			
		/////////////////
		// In game map
		InGameMap_UpdateGlobalMapState();
		
		////////////////////
		// Audio
		Sound_Play("Sound_DistantBattle_*", 1.0f);
		
		if (Sound_Exists("Sound_DistantBattle_*"))
		{
			Sound_Stop("Sound_DistantBattle_*", 5.0f);
			Sound_Play("Sound_DistantBattle_*", 1.0f);
		}
		
		/////////////////////////
		// Communications Key count fix
		if (cScript_GetGlobalVarBool("CommunicationsKeyFixApplied"))
		{
			cLux_AddDebugMessage("CommunicationsKeyFixApplied was true");
			if (InGameMap_IsObjectiveCompleted("Obj_GetRadioCode_Barracks")==false)
			{
				cLux_AddDebugMessage("Obj_GetRadioCode_Barracks was incomplete");
				array<iLuxEntity@> vKeys;
				Map_GetEntityArray("CommunicationsKey_*", vKeys, eLuxEntityType_Prop, "cScrPropPickup");
				for (uint i = 0; i < vKeys.length(); i++)
					vKeys[i].SetActive(false);
				
				tString sKeyToActivate = "";
				
				array<iLuxEntity@> vNotes;
				Map_GetEntityArray("Note_KeyLocation_*", vNotes, eLuxEntityType_Prop);
				for (uint i = 0; i < vNotes.length(); i++)
				{
					if (vNotes[i].IsActive()==false) continue;
					
					tString sNoteName = vNotes[i].GetName();
					int lLastUnderscore = cString_GetLastCharPos(sNoteName, '_');
					sKeyToActivate = cString_Sub(sNoteName, lLastUnderscore + 1);
					cLux_AddDebugMessage("Found KeyToActivate "+sKeyToActivate+" already active");
					
					break;
				}
				
				///////////////////////
				// No note is active, player has picked it up already
				if (sKeyToActivate == "")
				{
					tString[] vAuthors = {"Quint", "Autie", "Picart", "Goff", "Tirel", "Cazal"};
					for (int i = 0; i < vAuthors.length(); i++)
					{
						if (Sketchbook_GetHasNote("CommunicationsKeyLocation_"+vAuthors[i])==false)
							continue;
							
						sKeyToActivate = vAuthors[i];
						cLux_AddDebugMessage("Found KeyToActivate "+sKeyToActivate+" in sketchbook");
						break;
					}
				}
				
				if (sKeyToActivate == "")
				{
					Error("Unable to find the right key to activate! Will default to Tirel and re-activate their note.");
					Entity_SetActive("Note_KeyLocation_Tirel", true);
					Entity_SetActive("CommunicationsKey_Tirel_1", true);
				}
				else
				{
					cLux_AddDebugMessage("Activating key "+"CommunicationsKey_"+sKeyToActivate+"_1");
					Entity_SetActive("CommunicationsKey_"+sKeyToActivate+"_1", true);
				}
			}
			else
			{
				cLux_AddDebugMessage("Key already picked up, disabling all keys");
				Entity_SetActive("CommunicationsKey_*", false);
			}
		}
		cScript_SetGlobalVarBool("CommunicationsKeyFixApplied", false);
		
		// Picart's Key 3 is too difficult to find, use one of the others.
		if (Entity_IsActive("CommunicationsKey_Picart_3"))
		{
			Entity_SetActive("CommunicationsKey_Picart_3", false);
			Entity_SetActive("CommunicationsKey_Picart_"+cMath_RandRectl(1, 2), true);
		}
		
		////////////
		// Map change
		Game_SetupAfterMapChange();
		
		Entity_CreateAtEntityExt("gen_1", "generator.ent", "french_chair_messhall_21", true, cVector3f(0.5, 0.5, 0.5), cVector3f(0, 0, 0), cVector3f(0, 0, 0), true);
		Entity_SetCollideCharacter("gen_1", false);
	}

	//-------------------------------------------------------

	////////////////////////////
	// Run when leaving map
	void OnLeave()
	{
	
		/////////////////////////
		// Audio
		Sound_Stop("Sound_DistantBattle_*", 5.0f);
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// To get when player makes input (mostly used for debug)
	void OnAction(int alAction, bool abPressed) 
	{
		if (abPressed==false) return;
		
		if(alAction == eAction_Test1)
		{
			if (Generator_GetState() == eGeneratorState_On)
			{
				Generator_SetRunForever(false);
				Generator_ChangeState(eGeneratorState_Off);
			}
			else
			{
				Generator_AddFuel(2);
				Generator_ChangeState(eGeneratorState_On);
				Generator_SetRunForever(true);
			}
		}
		
		if (alAction == eAction_Test2)
		{
			////////////////
			// Broadcast shot message
			array<iLuxEntity@> vAgents;
			cLux_GetCurrentMap().GetEntityArray("*", eLuxEntityType_Agent, "", vAgents);
			
			for (int i = 0; i < vAgents.size(); ++i)
			{
				vAgents[i].BroadcastMessage(40, null, Player_GetPosition(), -1);
			}
		}
		
		if (alAction ==eAction_Test3)
		{
			////////////////
			// Disable all agents
			//RatHandler_SetActive(false);
			
			array<iLuxEntity@> vAgents;
			cLux_GetCurrentMap().GetEntityArray("*", eLuxEntityType_Agent, "", vAgents);
			
			for (int i = 0; i < vAgents.size(); ++i)
			{
				if (vAgents[i].GetName() != "Stalker_1")
					continue;
					
				vAgents[i].SetActive(false);
			}
		}
		
		if (alAction == eAction_Test4)
		{
			////////////////
			// Disable all traps
			array<iLuxEntity@> vTraps;
			cLux_GetCurrentMap().GetEntityArray("*", eLuxEntityType_Prop, "cScrPropTrap", vTraps);
			
			for (int i = 0; i < vTraps.size(); ++i)
			{
				tString sName = vTraps[i].GetName();
				Entity_SetActive(sName, false);
				Entity_SetActive(sName+"_*", false);
			}
		}
		
		if (alAction == eAction_Test5)
		{
			//Generator_SetPowerSwitchOn("PowerSwitch_3", true);
			Lever_SetStuckState("PowerSwitch_3", 1, true);
			Lever_SetAutoMoveTarget("PowerSwitch_3", -1);
			Lever_SetAutoMoveEnabled("PowerSwitch_3", true);
		}
		
		if (alAction == eAction_Test6)
		{
			//Player_SetEquipGasMask(true);
			
			Generator_AddFuel(2);
			Generator_ChangeState(eGeneratorState_On);
			Lever_SetStuckState("PowerSwitch_1", 1, true);
			
			Entity_SetActive("Note_DaisyChainedSwitchesHint", false);
			Entity_SetActive("sign_02_1", false);
			Entity_SetActive("Trap_16_Extra_4", false);
			Entity_SetActive("Trap_17_Extra_6", false);
			Entity_SetActive("barricade_4_breakable_4", false);
			Entity_SetActive("barricade_4_breakable_1", false);
			Entity_SetActive("corpse_french_03_rig_2", false);
			Entity_SetActive("RatFeed_2", false);
			Entity_SetActive("Rat_*", false);
			Entity_SetActive("dogtag_*", false);
			RatHandler_SetActive(false);
			Entity_SetActive("PowerSwitch_7", false);
			Entity_SetActive("PowerSwitchLamp_Out_7", false);
			Entity_SetActive("PowerSwitchLamp_In_7", false);
			
			array<cMeshEntity@> vMeshes;
			Map_GetDecalArray("sign_daisy-chain_1", vMeshes);
			
			for (int i = 0; i < vMeshes.size(); ++i)
			{
				cMeshEntity@ pMeshEnt = vMeshes[i];
				pMeshEnt.SetVisible(false);
				pMeshEnt.SetActive(false);
			}
		}
		
		if (alAction == eAction_Test7)
		{
			//Generator_AddFuel(2);
			//Generator_ChangeState(eGeneratorState_On);
			//Entity_SetActive("Stalker_1", true);
			//cScript_RunGlobalFunc("Stalker_1", "", "_Global_Debug");
			
			Entity_SetActive("Stalker_1", true);
			Stalker_GoToHole("Stalker_1", "GhoulHole_13", true, true);
			Sound_CreateAIEventAtEntity("player", 100, 4);
			Stalker_SetEmergeAllowed("Stalker_1", false);
		}
		
		if (alAction == eAction_Test8)
		{
			//cLux_GetPlayer().GiveDamage(0.1f, 1, eDamageType_RatBite, 0.f, tID_Invalid, mBaseObj.GetNewAttackInstanceID());
			SetRadioPowerOn(true);
			//Item_AddToInventory("Wrench");
		}
		
		if (alAction == eAction_Test9)
		{
			//Generator_AddFuel(10);
			//Generator_ChangeState(eGeneratorState_On);
			
			Entity_SetActive("Stalker_1", true);
			Stalker_SetMode("Stalker_1", eStalkerMode_Active);
			Stalker_GoToHole("Stalker_1", "GhoulHole_1", true, true);
			
			cScript_SetGlobalVarBool("PlayerHasBeenAttackedOnEmerge", true);
		}
		
		if (alAction == eAction_Test0)
		{
		}
		
		if (alAction == eAction_TestPlus)
		{
			Entity_SetActive("Stalker_1", true);
			cScript_RunGlobalFunc("Stalker_1", "", "_Global_Debug");
		}
		
		if (alAction == eAction_TestMinus)
		{
			array<iLuxEntity@> vKeys;
			Map_GetEntityArray("CommunicationsKey_*", vKeys, eLuxEntityType_Prop, "cScrPropPickup");
			for (uint i = 0; i < vKeys.length(); i++)
				cLux_AddDebugMessage(vKeys[i].GetName()+": "+vKeys[i].IsActive());
		}
	}
	
	//-------------------------------------------------------

	////////////////////////////
	// This only used for pure debug purposes when info needs to printed.
	float DrawDebugOutput(cGuiSet @apSet,iFontData @apFont,float afY)
	{
		//afY = cLux_DrawDebugText("My Debug value:"+..., afY);
		return afY;
	}
 
	//-------------------------------------------------------
 
	//} END MAIN CALLBACKS
 
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAIN FUNCTIONS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
	
	void OnBreak_MoveItemsToTheFloor(const tString &in asEntity)
	{
		if (asEntity=="french_table_messhall_01_8")
		{
			Prop_MoveLinearTo("Note_TheOfficersHaveFled", "Note_TheOfficersHaveFled_Floor", 4, 4, 0, false);
		}
		else if (asEntity=="french_table_messhall_01_14")
		{
			Prop_MoveLinearTo("Note_NoteToFarber", "Note_NoteToFarber_Floor", 4, 4, 0, false);
		}
	}
	
	//-------------------------------------------------------
	
	void OnBreak_DisableSlideLock(const tString &in asEntity)
	{
		const tString sLockEnt = "Lock_"+asEntity;
		if (Entity_Exists(sLockEnt)==false) return;
		Entity_SetActive(sLockEnt, false);
	}
	
	//-------------------------------------------------------
	
	bool OnTrigger_LockDoor(const tString &in asParent, const tString &in asChild, int alState)
	{
		SwingDoor_SetBlocked(Entity_GetVarString(asChild, ""), alState == 1, true);
		return true;
	}

	//-------------------------------------------------------
	
	void OnLookAt_SaveLamp(const tString &in asEntity, int alState)
	{
		if(alState == 1)
		{
			if (Hint_GetCurrentEntry() != "HintSaveLamp")
			{
				Hint_StopHint();
				Hint_RemoveFromGiven("Hints", "HintSaveLamp");
				Hint_ShowHint_Hold("Hints", "HintSaveLamp", true, 1.5f, true, 15.f, true, true);
			}
		}
		else
		{
			if (Hint_GetCurrentEntry() == "HintSaveLamp")
				Hint_StopHint();
				
			Entity_SetPlayerLookAtCallback(asEntity, "");
		}
	}
	
	//-------------------------------------------------------
	
	void OnInteract_SaveLamp(const tString &in asEntity)
	{
		////////////////
		// About to get lit!
		if (Lamp_GetLit(asEntity) == false)
			SaveGameProgress();
		else
			Map_AddTimer(asEntity, 1.f, "OnTimer_SaveGameProgress");
	
		////////////////
		// Add impulse
		Entity_AddImpulse("SaveLamp_Easy_Chain", cMath_RandomSphereSurfacePoint(0.5f), true, true);
	}
	
	//-------------------------------------------------------
	
	void OnTimer_SaveGameProgress(const tString&in asTimer)
	{
		Lamp_SetLit(asTimer, true, true);
		SaveGameProgress();
	}
	
	//-------------------------------------------------------
	
	void SaveGameProgress()
	{
		/////////////////
		// Save game
		SaveRoom_SaveGame(true, true);
		
		////////////////
		// Hints
		if (Hint_GetCurrentEntry() == "HintSaveLamp")
			Hint_StopHint();
		
		GameStats_IncreaseEntryAmount(eHeroStats_TimesSaved);
	}
	
	//-------------------------------------------------------
	
	//} END MAIN FUNCTIONS 
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// MAP STREAMING
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
	
	bool OnTrigger_Player_OpenHatch(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == -1)
			return true;
		if (cLux_GetPlayer().GetCurrentStateId() != ePlayerState_Ladder) 
			return true;		
		
		Map_RemoveTimer("Timer_CloseHatch");
		
		if (SwingDoor_GetOpenAmount("tth_metal_hatch_1") > 0.5f) 
		{
			Map_AddTimer("Timer_CloseHatch", 1.1f, "OnTimer_CloseHatch");
		}
		else
		{
			SwingDoor_PushOpen("tth_metal_hatch_1", 5.f, 3.f, 0.1f);
			Map_AddTimer("Timer_CloseHatch", 2.f, "OnTimer_CloseHatch");
		}
		
		return true;
	}
	
	//-------------------------------------------------------
	
	void OnTimer_CloseHatch(const tString &in asTimer)
	{
		SwingDoor_PushOpen("tth_metal_hatch_1", -3.f, 3.f, 0.1f);
	}
	
	//-------------------------------------------------------
	
	bool OnTrigger_Player_SwitchMap_Hub(const tString &in asParent, const tString &in asChild, int alState)
	{
		Blackboard_SetupStalkerMapTransfer("Stalker_1");
		Game_DoMapChange("officer_hub.hpm", "MapTransfer_ToBarracks");
		return true;
	}

	//-------------------------------------------------------
	
	//} END MAP STREAMING
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// GENERATOR
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
	
	//-------------------------------------------------------
	
	bool mbFirstSwitchTurnedOn = false;
	
	//-------------------------------------------------------
	
	void SetupGenerator()
	{
		Generator_SetupEntities("", "", "", "", "Lamp_Generator_*", "Lamp_GeneratorBackup_*");
		
		Generator_AddPowerSwitch("PowerSwitch_5", "", "PowerSwitch_4", "Lamp_PowerSwitch_5_*", true); // Back hallway towards the dining room switch
		Generator_AddPowerSwitch("PowerSwitch_4", "PowerSwitch_5", "PowerSwitch_1", "Lamp_PowerSwitch_4_*", true); // Sleeping quarters switch
		Generator_AddPowerSwitch("PowerSwitch_1", "PowerSwitch_4", "PowerSwitch_7", "Lamp_PowerSwitch_1_*", false); // 1st switch in the entrance hallway
		Generator_AddPowerSwitch("PowerSwitch_7", "PowerSwitch_1", "", "Lamp_PowerSwitch_7_*", false); //2nd switch in the entrance hallway
		Generator_AddPowerSwitch("PowerSwitch_8", "", "PowerSwitch_3", "Lamp_PowerSwitch_8_*", true); // Music Radio Switch
		Generator_AddPowerSwitch("PowerSwitch_3", "PowerSwitch_8", "PowerSwitch_2", "Lamp_PowerSwitch_3_*", false); // PRE - Communications Radio Switch
		Generator_AddPowerSwitch("PowerSwitch_2", "PowerSwitch_3", "", "Lamp_PowerSwitch_2_*", false); // Communications Radio Switch
		Generator_AddPowerSwitch("PowerSwitch_6", "", "", "Lamp_PowerSwitch_6_*", true); // Dining area switch
			
		Generator_EndSetup();
	}
	
	//-------------------------------------------------------
		
	void OnConnectionState_PowerSwitch(const tString &in asEntity, int alState)
	{
		if (alState == 0) return;
		if (cLux_GetCurrentMap() is null) return;
		if (cLux_IsChangingMap()) return;
		if (Generator_GetIsSetupDone() == false) return;
		
		Generator_SetPowerSwitchOn(asEntity, alState == 1);
		
		////////////////////
		// Utility room objective
		if (asEntity == "PowerSwitch_3")
		{
			if (alState == 1)
			{
				InGameMap_SetObjectiveCompleted("Obj_GetRadioCode_PowerSwitch");
			}
			else
			{
				if (InGameMap_IsObjectiveCompleted("Obj_GetRadioCode_Communications") == false &&
					InGameMap_IsObjectiveCompleted("Obj_GetRadioCode_PowerSwitch"))
				{
					InGameMap_SetObjectiveNotCompleted("Obj_GetRadioCode_PowerSwitch");
					InGameMap_AddObjective("Obj_GetRadioCode_PowerSwitch");
				}
			}
		}	
		
		/////////////////////////////////
		// Check if the radio is powered when each of the chain-linked switches is on
		if (asEntity == "PowerSwitch_2" || asEntity=="PowerSwitch_3" || asEntity=="PowerSwitch_8")
		{
			bool bRadioIsPowered = GetRadioPowerOn();
			SetRadioPowerOn(bRadioIsPowered);
		}
		
		////////////////////
		// Music Radio Sound
		/*if (asEntity == "PowerSwitch_8")
		{
			tString sRadioSound = "Sound_MusicRadio";
			if (GetIsMusicRadioOn())
				Sound_Play(sRadioSound, 0.1f, false);
			else
				Sound_Stop(sRadioSound, 0.1);
		}*/
	}
	
	//-------------------------------------------------------
	
	void OnTimer_ConnectedBoxSpark(const tString &in asTimer)
	{
		Entity_SetActive("PowerSwitchLamp_In_7", true);
		Lamp_SetLit("PowerSwitchLamp_In_7", true, true);
		Sound_CreateAtEntity("Sound_ConnectedBoxSpark", "level_entity_shared/lights/bunker_box_spark", "PowerSwitch_7");
	}
	
	//-------------------------------------------------------
	
	void OnStateChange_Generator(int alState)
	{
		///////////////////
		// Generator Sounds
		if (alState!=1)
			Sound_Play("Sound_GeneratorOff", 0.f);
		
		///////////////
		// Toggle radio
		bool bRadioIsPowered = GetRadioPowerOn();
		SetRadioPowerOn(bRadioIsPowered);
		
		///////////////////
		// Music Radio
		/*tString sRadioSound = "Sound_MusicRadio";
		if (GetIsMusicRadioOn())
			Sound_Play(sRadioSound, 0.1f, false);
		else
			Sound_Stop(sRadioSound, 0.1);*/
	}
	
	//-------------------------------------------------------
	
	//} END GENERATOR
	
	//////////////////////////////////////////////////////////////////////////////////////////
	// ==============
	// EVENTS
	// ==============
	//{///////////////////////////////////////////////////////////////////////////////////////
 
	//-------------------------------------------------------
	
	void OnInteract_ShowSoldierQuartersMap(const tString &in asEntity)
	{
		InGameMap_SetMapFound("soldier_quarters");
	}
		 
	//-------------------------------------------------------
	
	void OnGui_Map(float afTimeStep, float afAlpha)
	{
		bool bZoomed = ZoomArea_GetIsZoomedIn();
		
		cImGuiLabelData labelData = ImGui_GetDefaultLabel();
		labelData.mFont.SetFile(FontHandler_GetFont(eFontType_Readable,96));
		labelData.mFont.mvSize = bZoomed ? 24 : 18;
		labelData.mColorBase = cColor_White;
		labelData.mGfxBackground.mColor = cColor(0, afAlpha);
		labelData.mbUseBackgroundGfx = true;
		
		ImGui_SetModColorMul(cColor(1, afAlpha));
		ImGui_SetAlignment(eImGuiAlign_CenterCenter);
		ImGui_SetTransCategory("MapOverlay");
		
		tString sMap = "SoldierQuarters";
		DrawMapPins("Map_"+sMap+"_Pin_*", labelData, bZoomed);		
		if (bZoomed) DrawMapPins("Map_"+sMap+"_ZoomPin_*", labelData, bZoomed);
		
		ImGui_SetAlignment(eImGuiAlign_TopLeft);
		ImGui_SetModColorMul(cColor_White);
	}
	
	//-------------------------------------------------------
	
	void DrawMapPins(const tString &in asName, cImGuiLabelData@ apLabelData, bool abZoomed)
	{
		array<iLuxEntity@> vPins;
		Map_GetEntityArray(asName, vPins, eLuxEntityType_Area);
		
		for (int i = 0; i < vPins.length(); i++)
		{
			iLuxEntity@ pEnt = vPins[i];
			tString sText = pEnt.GetVarString("");
			ImGui_DoLabelExt(sText, apLabelData, GetHudPosFromWorldPos(pEnt.GetPosition(), abZoomed));
		}
	}
	
	//-------------------------------------------------------
	
	cVector3f GetHudPosFromWorldPos(const cVector3f &in avWorldPos, bool abZoomed)
	{
		cVector3f vMagicOffset = abZoomed ? cVector3f(25, 25, 0) : cVector3f(12, 12, 0);
		cVector2f vScreenSize = cGraphics_GetLowLevel().GetScreenSizeFloat();
		cRect2l rect = cMath_GetClipRectFromSphere(avWorldPos, 0.01, cLux_GetViewport().GetCamera().GetFrustum(), cVector2l(vScreenSize.x, vScreenSize.y), false, false);
		cVector2f vHudPos = (cVector2f(rect.x, rect.y) * cLux_GetHudVirtualSize()) / vScreenSize;
		
		return cLux_GetHudVirtualStartPos() + cVector3f(vHudPos.x, vHudPos.y, 1) - ImGui_GetCurrentGroupPos() + vMagicOffset;
	}
	
	//-------------------------------------------------------
	
	bool OnTrigger_Player_ActivateStalker(const tString &in asParent, const tString &in asChild, int alState)
	{
		if (alState == -1) return true;
		
		Entity_SetActive("Trigger_ActivateStalker_*", false);
		
		if (Entity_IsActive("Stalker_1"))
		{
			return false;
		}
		
		Entity_SetActive("Stalker_1", true);		
		Stalker_GoToHole("Stalker_1", "GhoulHole_1", true, true);
		return false;
	}
	
	//-------------------------------------------------------
	
	bool OnTrigger_Player_ActivateRatsInHub(const tString &in asParent, const tString &in asChild, int alState)
	{
		cScript_SetGlobalVarBool("RatsInHub", true);
		return false;
	}
	
	//-------------------------------------------------------
	
	cVector3f mvPadlockAttachPos = 0.f;
	
	void Update(float afTimeStep)
	{
		/////////////////
		// Padlock		
		iLuxEntity@ pDoor = mBaseObj.GetEntityByName("MaintenanceDoor", eLuxEntityType_Prop);
		iLuxEntity@ pLock = mBaseObj.GetEntityByName("Padlock", eLuxEntityType_Prop);
		
		if (pDoor is null || pLock is null) return;
		if (pDoor.IsActive() == false || pLock.IsActive() == false) return;
		
		if (mvPadlockAttachPos == cVector3f(0.f))
		{
			cMatrixf mtxDoorInverse = cMath_MatrixInverse(pDoor.GetMatrix());
			mvPadlockAttachPos = cMath_MatrixMul(mtxDoorInverse, pLock.GetMainBody().GetWorldPosition());
		}
		
		pLock.SetAutoSleep(false);
			
		for (int i = 0; i < pLock.GetBodyNum(); ++i)
			pLock.GetBody(i).SetAutoDisable(false);
		
		cVector3f vLockPos = pLock.GetMainBody().GetWorldPosition();
		cVector3f vLockGoal = cMath_MatrixMul(pDoor.GetMatrix(), mvPadlockAttachPos);
		cVector3f vDelta = vLockGoal - vLockPos;
		
		pLock.GetMainBody().StaticLinearMove(vDelta / afTimeStep);
	}
	
	//-------------------------------------------------------
	
	void OnBreak_Padlock(const tString &in asEntity)
	{
		Entity_SetCollide("metal_door_lock_hinge_1", true);
	}
	
	void OnTimer_AddPadlockImpulse(const tString &in asTimer)
	{
		iLuxEntity@ pEnt = mBaseObj.GetEntityByName(asTimer + "_broken", eLuxEntityType_Prop);
		if (pEnt is null) return;
		
		for (int i = 0; i < pEnt.GetBodyNum(); ++i)
		{
			iPhysicsBody@ pBody = pEnt.GetBody(i);
			pBody.AddTorque(cMath_RandomSphereSurfacePoint(1.f));
		}
	}
	
	void OnTimer_EnablePadlockCollision(const tString &in asTimer)
	{
		tString sEnt = asTimer + "_broken";
		Entity_SetCollide(sEnt, true);
	}
	
	//-------------------------------------------------------
		
	bool CanUse_CommunicationsKey(const tString &in asItemType, const tString &in asItemID, const tString &in asPickedEntity)
	{
		return asPickedEntity == "Lock_CoomsRoomDoor_Proxy";
	}
	
	bool OnUse_CommunicationsKey(const tString &in asItemType, const tString &in asItemID, const tString &in asTargetEntity, const tString &in asItemEntity, float afTimeElapsed, float afTimeStep)
	{	
		PlayerBody_SetArmAnimationPitch(false, true, true);
		PlayerBody_SetArmAnimationYaw(false, true, true);
		
		PlayerBody_SetUnequipItemsOnCutscene(true, false);
		PlayerBody_PlayCutsceneAtEntity("tool_key_use", "Lock_CoomsRoomDoor_AnimPos", false, 0.3);
		
		Map_AddTimer("Timer_CommunicationsKeyUnlock", 1.75, "OnTimer_CommunicationsKeyUnlock");
		Map_AddTimer("Timer_CommunicationsKeyRelease", 2.65, "OnTimer_CommunicationsKeyRelease");
		
		Entity_SetActive("Lock_CoomsRoomDoor_Proxy", false);
		
		return false;
	}
	
	//-------------------------------------------------------
	
	void OnTimer_CommunicationsKeyUnlock(const tString &in asTimer)
	{
		SwingDoor_SetBlocked("CoomsRoomDoor", false, true);
	}
	
	//-------------------------------------------------------
	
	void OnTimer_CommunicationsKeyRelease(const tString &in asTimer)
	{
		tString sHeld = Item_GetHeldEntity(eItemHandlerHand_Right);
		Entity_SetActive("UsedKey", true);
		Entity_PlaceAtEntity("UsedKey", sHeld, 0.f, true);
		
		Item_RemoveFromInventory(ItemType_GetFirstInInventory("CommunicationsKey"), eInventoryInstance_Player, false, true);
	}
		
	//-------------------------------------------------------

	void OnAnimEnd_CommunicationsKeyUsed(const tString &in asAnim)
	{
	}
	
	//-------------------------------------------------------
	
	bool mbKnowsCommRoomDoorLocked = false;
	bool mbKnowsKeybox = false;
	
	//-------------------------------------------------------
	
	void OnPlayerLookAt_CommRoomLock(const tString &in asEntity, int alState)
	{
		mbKnowsCommRoomDoorLocked = true;
		
		InGameMap_AddObjective("Obj_GetRadioCode_Communications");
		
		if (mbKnowsKeybox)
		{
			InGameMap_AddObjective("Obj_GetRadioCode_Security");
		}
	}
	
	//-------------------------------------------------------
	
	void OnPLayerLookAt_KeyBox(const tString &in asEntity, int alState)
	{
		mbKnowsKeybox = true;
		if (mbKnowsCommRoomDoorLocked)
		{
			InGameMap_AddObjective("Obj_GetRadioCode_Communications");
			InGameMap_AddObjective("Obj_GetRadioCode_Security");
		}
	}

	//-------------------------------------------------------
	
	void OnPlayerInteract_CommunicationsKey(const tString &in asEntity)
	{
		InGameMap_SetObjectiveCompleted("Obj_GetRadioCode_Security");
		InGameMap_SetObjectiveCompleted("Obj_GetRadioCode_Barracks");
		InGameMap_AddObjective("Obj_GetRadioCode_Communications", 1.f);
		InGameMap_AddObjective("Obj_GetRadioCode_NoMarker", 1.f);
	}
	
	//-------------------------------------------------------
	
	void OnPLayerLookAt_UtilityRoomSwitch(const tString &in asEntity, int alState)
	{
		InGameMap_AddObjective("Obj_GetRadioCode_Communications");
		InGameMap_AddObjective("Obj_GetRadioCode_PowerSwitch");
	}
	
	//-------------------------------------------------------
	
	bool mbRadioOn = false;
	
	//-------------------------------------------------------
	
	bool GetRadioPowerOn()
	{
		return Generator_GetState()==eGeneratorState_On && 
				Lever_GetState("PowerSwitch_2")==1 && 
				Lever_GetState("PowerSwitch_3")==1 && 
				Lever_GetState("PowerSwitch_8")==1;
	}
	
	//-------------------------------------------------------
	
	void SetRadioPowerOn(bool abX)
	{
		if (mbRadioOn == abX) return;
		
		mbRadioOn = abX;
		
		Lamp_SetLit("RadioLamp_*", abX, true);
		Lamp_SetupFlicker("RadioLamp_*", 0.7f, 0.7f, 0.7f, 0.7f, true);
		Lamp_SetFlickerActive("RadioLamp_*", abX);
		
		////////////
		// turn off
		if (abX==false)
		{
			Sound_Stop("Sound_Radio", 0.f);
			Sound_Stop("Sound_RadioMessage", 0.f);
			MovingButton_SetSwitchedOn("RadioButton", false, true);
			PlayRadioCode(false);
			
			return;
		}
	}
	
	//-------------------------------------------------------
	
	void PlayRadioCode(bool abX)
	{
		Lamp_SetFlickerActive("RadioLamp_*", abX==false);
		
		if (abX && mbRadioOn)
		{
			Sound_Play("Sound_Radio", 0.f);
			
			if (SequenceStates_IsActive("Seq_RadioCode")==false)
				Seq_RadioCode("");
				
			return;
		}
		
		if (abX == false)
		{
			Dialog_StopAll();
			Voice_StopAll();
			
			SequenceStates_Resume("Seq_RadioCode");
			SequenceStates_Stop("Seq_RadioCode");
			
			Sound_Stop("Sound_Radio", 0.f);
		}	
	}
	
	//-------------------------------------------------------
	
	void OnStateChange_RadioButton(const tString &in asEntity, int alState)
	{
		float fBtnRevertTime = mbRadioOn ? -1.f : 1.f;
		MovingButton_SetReturnToOffTime(asEntity, fBtnRevertTime);
		PlayRadioCode(alState==1);
	}
	
	//-------------------------------------------------------
	
	cSequenceStatesData mSeq_RadioCode;
		
	void Seq_RadioCode(const tString &in asTimer)
	{
		Sequence_Begin("Seq_RadioCode", mSeq_RadioCode);
		
		if (Sequence_DoStepAndPause(0.0f))
		{
			int lCode = Randomizer_GetCode("Arsenal");
			tString sCodeString = cString_ToString(lCode, 4);
			
			Dialog_Begin();
				Dialog_AddBranchAndSubject("Message_Start"); 
				AddCodeSubjects(sCodeString, "OnVoice_RadioMessageOver");
				Dialog_AddPause(4);
				Dialog_AddSubject("Message_Mid");
				AddCodeSubjects(sCodeString, "");
				Dialog_AddPause(4);
				Dialog_AddSubject("Message_End");
				AddCodeSubjects(sCodeString, "OnVoice_RadioMessageEnd");
			Dialog_End();
		}
		else if (Sequence_DoStepAndWait(1.f))
		{
			if (Sketchbook_GetHasCode("RadioCode")==false)
			{
				int lCode = Randomizer_GetCode("Arsenal");
				tString sCodeString = cString_ToString(lCode, 4);
			
				Sketchbook_AddCode("RadioCode", sCodeString);
				Achievement_Unlock(eAchievement_Signalman);
				
				Music_Play("Bunker_RadioCode.ogg", 0.1f, false, eMusicPrio_MinorEvent);
				
				/////////////
				// Remove objective
				InGameMap_SetObjectiveCompleted("Obj_GetRadioCode_Communications");
				InGameMap_SetObjectiveCompleted("Obj_GetRadioCode_Security");
				InGameMap_SetObjectiveCompleted("Obj_GetRadioCode_Barracks");
				InGameMap_SetObjectiveCompleted("Obj_GetRadioCode_PowerSwitch");
				InGameMap_SetObjectiveCompleted("Obj_GetRadioCode_NoMarker");
				
				//////////////
				// Increase stalker escalation
				bool bFullStep = Game_GetDifficultyMode() == eGameMode_Hard;
				Blackboard_IncreaseStalkerEscalation(bFullStep);
				cScript_SetGlobalVarInt("LevelProgression", cScript_GetGlobalVarInt("LevelProgression") + 1);
			}
		}
		
		Sequence_End();
	}
	
	//-------------------------------------------------------
	
	void AddCodeSubjects(const tString &in asCode, const tString &in asCallback)
	{
		float fPauseMin = 0.2f;
		float fPauseMax = 0.4f;
		Dialog_AddSubject("Message_Num_"+cString_Sub(asCode, 0, 1));
		Dialog_AddPause(cMath_RandRectf(fPauseMin, fPauseMax));
		Dialog_AddSubject("Message_Num_"+cString_Sub(asCode, 1, 1));
		Dialog_AddPause(cMath_RandRectf(fPauseMin, fPauseMax));
		Dialog_AddSubject("Message_Num_"+cString_Sub(asCode, 2, 1));
		Dialog_AddPause(cMath_RandRectf(fPauseMin, fPauseMax));
		Dialog_AddSubject("Message_Num_"+cString_Sub(asCode, 3, 1), asCallback);
	}
	
	//-------------------------------------------------------
	
	void OnVoice_RadioMessageOver(const tString&in asSubject, bool abStartofSubject)
	{
		if (abStartofSubject) return;
		
		SequenceStates_Resume("Seq_RadioCode");
	}
	
	//-------------------------------------------------------
	
	void OnVoice_RadioMessageEnd(const tString&in asSubject, bool abStartofSubject)
	{
		if (abStartofSubject) return;
		
		Entity_CallEntityInteract("RadioButton");
	}
	
	//-------------------------------------------------------
	
	bool OnTrigger_SoundSweet_1(const tString &in asParent, const tString &in asChild, int alState)
	{
		Entity_SetActive("Trigger_SoundSweet_1",false);
		Sound_Play("Sound_TriggerSweet_1", 0.0f);
		return false;
	}
	
	//-------------------------------------------------------
	
	bool OnTrigger_SoundSweet_2(const tString &in asParent, const tString &in asChild, int alState)
	{
		Entity_SetActive("Trigger_SoundSweet_2",false);
		Sound_Play("Sound_TriggerSweet_2", 0.0f);
		return false;
	}
 
	//-------------------------------------------------------
	
	bool OnTrigger_PlayBarricadeSweet(const tString &in asParent, const tString &in asChild, int alState)
	{
		Entity_SetActive("Trigger_SoundBarricade",false);
		Sound_Play("Sound_SweetBarricade", 0.0f);
		return false;
	}
	
	//-------------------------------------------------------
	
	void OnBreak_CabinetPadlock(const tString &in asEntity)
	{
		//Prop_SetStaticPhysics("filing_cabinet_5_hinge_1", false);
		//Entity_SetCollide("filing_cabinet_5_hinge_1", true);
	}
	
	//-------------------------------------------------------
	
	bool GetIsMusicRadioOn()
	{
		return Generator_GetState()==eGeneratorState_On && 
				Lever_GetState("PowerSwitch_8")==1;
	}
	
	/*void OnBreak_MusicRadio(const tString &in asEntity)
	{
		Sound_Stop("Sound_MusicRadio", 0.1);
	}*/
	
	//-------------------------------------------------------
	
	//MUSIC--------------------------------------------------
	//-------------------------------------------------------

	bool OnTrigger_PlayQuartersMusic(const tString &in asParent, const tString &in asChild, int alState)
	{
		Music_Stop(15.0f, eMusicPrio_BgAmb);
		Map_AddTimer("Timer_LevelMusic", 10.0f, "OnTimer_PlayQartersMusic");
		return false;
	}
		
	//-------------------------------------------------------

	void OnTimer_PlayQartersMusic(const tString &in asTimer)
		{
			Map_AddTimer("Timer_MusicStop", cMath_RandRectf(240.f, 300.f), "OnTimer_StopMusic");
			Music_PlayExt("Bunker_SoldierQuarters.ogg", true, 0.09f, 1.0f, 18.0f, 1.0f, eMusicPrio_SceneAmb, true);
		}
		
	//-------------------------------------------------------

	void OnTimer_StopMusic(const tString &in asTimer)
		{
			Music_Stop(15.0f, eMusicPrio_SceneAmb);
			Map_AddTimer("Timer_MusicRand", cMath_RandRectf(240.f, 270.f), "OnTimer_PlayQartersMusic");
		}

	//-------------------------------------------------------
	//MUSIC_END----------------------------------------------
 
	//} END EVENTS
}